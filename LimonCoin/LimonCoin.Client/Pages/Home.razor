@page "/"
@using Blazored.LocalStorage
@using LimonCoin.Shared
@using Microsoft.AspNetCore.SignalR.Client

@rendermode InteractiveAutoWithoutPrerender

@inject IJSRuntime js
@inject NavigationManager navManager
@inject HttpClient httpClient

<PageTitle>Home</PageTitle>

@if(!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="overlay text-center w-100 h-100 p-4">
        <h2>Ошибка подключения к серверу...</h2>
        <div style="color: darkred; font-size: 10px;" class="mt-2">@errorMessage</div>
    </div>
}

<div class="text-center">
    <div style="padding-top: 6%; padding-bottom: 6%; padding-left: 4%; padding-right: 4%;">
        <div>
            <div style="gap: 10px;" class="d-flex justify-content-center">
                <img class="fade-in" src="images/emojis/small_coin.svg" />
                <h1>@(lastUpdate.Coins.ToString("#,0"))</h1>
            </div>

            <div>
                <h3 class="grayed-out">$ @usdCoins USD</h3>
            </div>

            <div style="gap: 5px;" class="d-flex justify-content-center text-center">
                <img style="margin-top: 2px;" width="18" height="20" src="images/cups/@(league.ToProgramName()).png" />
                <a href="@($"/league/{(int)league}?UserCoins={lastUpdate.Coins}&Energy{lastUpdate.Energy}&MaxEnergy={lastUpdate.MaxEnergy}")" style="text-decoration: none; color: white;">@league.ToDisplayName() ></a>
            </div>
        </div>
    </div>

    <div style="padding-left: 4%; padding-right: 4%;">
        <img class="tiltingParent pop" @ontouchstart=Click style="width: 85%;" src="images/home/coin.png" />
    </div>

    <div class="bottom" style="padding-top: 6%; padding-left: 4%; padding-right: 4%;">
        <a href="/withdraw?UserCoins=@lastUpdate.Coins&Energy=@lastUpdate.Energy&MaxEnergy=@lastUpdate.MaxEnergy" style="margin-top: 18px; margin-bottom: 18px;">
            <img src="images/buttons/withdraw_button.svg" />
        </a>

        <div class="d-flex" style="margin-bottom: 18px; justify-content: space-between;">
            <div class="d-flex" style="margin-top: 3%;">
                <img height="50" width="50" src="images/emojis/energy.png" />
                <div class="energy-container">
                    <h3>@lastUpdate.Energy</h3>
                    <h6 style="margin-top: -10px;" class="grayed-out">/@lastUpdate.MaxEnergy</h6>
                </div>
            </div>

            <div class="group-box">
                <div class="group-box-container">
                    <a href="/friends?UserCoins=@lastUpdate.Coins&Energy=@lastUpdate.Energy&MaxEnergy=@lastUpdate.MaxEnergy" class="group-box-elements" style="text-decoration: none; color: white;">
                        <img width="28" height="28" src="images/emojis/bear.png" />
                        Друзья
                    </a>
                    <div class="group-box-line" />
                    <a href="/tasks?UserCoins=@lastUpdate.Coins&Energy=@lastUpdate.Energy&MaxEnergy=@lastUpdate.MaxEnergy" class="group-box-elements" style="text-decoration: none; color: white;">
                        <img width="28" height="28" src="images/emojis/money.png" />
                        Задания
                    </a>
                    <div class="group-box-line" />
                    <a href="/boosts?UserCoins=@lastUpdate.Coins&Energy=@lastUpdate.Energy&MaxEnergy=@lastUpdate.MaxEnergy" class="group-box-elements" style="text-decoration: none; color: white;">
                        <img width="28" height="28" src="images/emojis/rocket.png" />
                        Буст
                    </a>
                </div>
            </div>
        </div>


        <div class="d-flex justify-content-center">
            <ProgressBar EnergyPercent=@energyPercent Color="#FBB92D" Gradient="linear-gradient(270deg, rgba(255, 255, 255, 0.80) 0%, rgba(255, 255, 255, 0.00) 100%)" />
        </div>
    </div>
</div>

<script>
    tilt();
    expandWebApp();
</script>

@code {
    private static readonly InteractiveAutoRenderMode InteractiveAutoWithoutPrerender = new InteractiveAutoRenderMode(false);

    [SupplyParameterFromQuery]
    public long UserCoins { get; init; }

    [SupplyParameterFromQuery]
    public int Energy { get; init; }

    [SupplyParameterFromQuery]
    public int MaxEnergy { get; init; }

    private HubConnection hub;

    private UserDTO lastUpdate = new();

    private float energyPercent => ((float)lastUpdate.Energy / (float)lastUpdate.MaxEnergy) * 100f;

    private decimal usdCoins => lastUpdate.Coins / 100_000m;

    private LeagueType league => LeagueTypeExtensions.GetLeagueFromCoins(lastUpdate.Coins);

    private long telegramId;

    private DateTime lastTimeClicked = DateTime.Now;

    private string errorMessage = "";

    public async Task Click()
    {
        if(hub.State != HubConnectionState.Connected)
        {
            return;
        }

        if (lastTimeClicked.AddMilliseconds(25) > DateTime.Now)
        {
            return;
        }

        await hub.SendAsync("Click", telegramId);

        lastTimeClicked = DateTime.Now;
    }

    protected override async Task OnParametersSetAsync()
    {
        lastUpdate = new()
        {
            Coins = (ulong)UserCoins,
            Energy = (uint)Energy,
            MaxEnergy = (uint)MaxEnergy
        };

        hub = new HubConnectionBuilder()
            .WithUrl(navManager.BaseUri + "api/hub/clicker")
            .WithAutomaticReconnect()
            .Build();

        hub.On<UserDTO>("ReceiveUpdate", async update =>
        {
            lastUpdate = update;
            StateHasChanged();
        });

        hub.On<string>("ReceivedNotification", async notificationMessage =>
        {
            await js.InvokeVoidAsync("showToast", notificationMessage);
        });

        try
        {
            await hub.StartAsync();
        }
        catch(Exception ex)
        {
            errorMessage = ex.ToString();
        }

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        try
        {
            telegramId = await js.InvokeAsync<long>("getUserId");
            await hub.SendAsync("Register", telegramId);
        }
        catch(Exception ex)
        {
            errorMessage = ex.ToString();
        }

        StateHasChanged();
    }
}
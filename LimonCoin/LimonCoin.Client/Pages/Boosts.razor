@page "/boosts"
@using LimonCoin.Shared

@rendermode InteractiveWebAssembly

@inject IJSRuntime js
@inject HttpClient httpClient

<link rel="stylesheet" href="css/menu.css" />

<div style="display: flex; justify-content: center; z-index: -1; pointer-events: none;">
    <img style="position: fixed; margin-top: 12%;" src="images/starry-background-1.svg" />
</div>

<div class="text-center" style="padding-top: 12%; padding-bottom: 6%; padding-left: 4%; padding-right: 4%;">
    <h6 class="grayed-out">Ваш баланс</h6>

    <div class="d-flex justify-content-center gap-2">
        <img class="fade-in" src="images/emojis/small_coin.svg" />
        <h1>@UserCoins</h1>
    </div>

    <h3 class="grayed-out">$ @usdCoins USD</h3>

    <a href="/withdraw?UserCoins=@UserCoins&Energy=@Energy&MaxEnergy=@MaxEnergy">
        <img style="margin-top: 20px;" src="images/buttons/withdraw_button.svg" />
    </a>

    <div class="d-flex justify-content-center mt-3">
        <h2>Бусты</h2>
    </div>

    <div class="bottom-panel-boosts d-flex gap-4" style="margin-top: 5px; padding: 26px; flex-direction: column;">
        <div @onclick="() => Buy(0)" class="d-flex">
            <div class="boost-icon">
                <img src="images/boosts/click.png" height="50" width="50" />
            </div>
            <div style="margin-left: 10px; margin-top: 3px; text-align: initial;" class="boost-texts">
                <div class="d-flex gap-1">
                    <h5>Мега тап</h5>
                    <h6 style="margin-top: 4px;" class="grayed-out">(@(user.ClickerLevel + 1) LVL)</h6>
                </div>

                @if(user.ClickerLevel == 2)
                {
                    <div style="font-size: 10px; font-weight: 400; margin-top: -8px; font-family: Arial;">Вы достигли максимума</div>
                }
                else
                {
                    <div style="font-size: 10px; font-weight: 400; margin-top: -8px; font-family: Arial;">За 1 клик добавляется @cpsAfter монет вместо @cpsBefore</div>
                    <h3 class="price-text" style="margin-top: -3px;">@cpsPrice руб.</h3>
                }
            </div>
        </div>
        <div @onclick="() => Buy(1)" class="d-flex">
            <div class="boost-icon">
                <img src="images/boosts/energy-restore.png" height="50" width="50" />
            </div>
            <div style="margin-left: 10px; margin-top: 3px; text-align: initial;" class="boost-texts">
                <div class="d-flex gap-1">
                    <h5>Быстрая зарядка</h5>
                    <h6 style="margin-top: 4px;" class="grayed-out">(@(user.EnergyRecoveryLevel + 1) LVL)</h6>
                </div>

                @if (user.EnergyRecoveryLevel == 2)
                {
                    <div style="font-size: 10px; font-weight: 400; margin-top: -8px; font-family: Arial;">Вы достигли максимума</div>
                }
                else
                {
                    <div style="font-size: 10px; font-weight: 400; margin-top: -8px; font-family: Arial;">За 3 сек. прибавляется @energyRechargeAfter заряда вместо @energyRechargeBefore</div>
                    <h3 class="price-text" style="margin-top: -3px;">@energyRechargePrice руб.</h3>
                }

                
            </div>
        </div>
        <div @onclick="() => Buy(2)" class="d-flex">
            <div class="boost-icon">
                <img src="images/boosts/energy-capacity.png" height="50" width="50" />
            </div>
            <div style="margin-left: 10px; margin-top: 3px; text-align: initial;" class="boost-texts">
                <div class="d-flex gap-1">
                    <h5>Лимит энергии</h5>
                    <h6 style="margin-top: 4px;" class="grayed-out">(@(user.EnergyCapacityLevel + 1) LVL)</h6>
                </div>

                @if (user.EnergyCapacityLevel == 2)
                {
                    <div style="font-size: 10px; font-weight: 400; margin-top: -8px; font-family: Arial;">Вы достигли максимума</div>
                }
                else
                {
                    <div style="font-size: 10px; font-weight: 400; margin-top: -8px; font-family: Arial;">Лимит энергии @energyCapacityAfter вместо @energyCapacityBefore</div>
                    <h3 class="price-text" style="margin-top: -3px;">@energyCapacityPrice руб.</h3>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public long UserCoins { get; init; }

    [SupplyParameterFromQuery]
    public int Energy { get; init; }

    [SupplyParameterFromQuery]
    public int MaxEnergy { get; init; }

    private decimal usdCoins => UserCoins / 100_000m;

    int cpsBefore = 3;
    int cpsAfter = 5;
    int cpsPrice = 2499;

    int energyRechargeBefore = 1;
    int energyRechargeAfter = 3;
    int energyRechargePrice = 2499;

    int energyCapacityBefore = 3000;
    int energyCapacityAfter = 10000;
    int energyCapacityPrice = 2499;

    long telegramId;

    UserDTO user = new();

    async Task Buy(int boost)
    {
        await httpClient.PostAsync($"api/user/requestPayment?id={telegramId}&boost={boost}", null);

        await js.InvokeVoidAsync("closeWebApp");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await js.InvokeVoidAsync("backButtonToggle", $"?UserCoins={UserCoins}&Energy={Energy}&MaxEnergy={MaxEnergy}");

        telegramId = await js.InvokeAsync<long>("getUserId");

        user = await httpClient.GetFromJsonAsync<UserDTO>($"api/user/{telegramId}");

        cpsBefore = user.ClickerLevel switch
        {
            0 => 3,
            1 => 5
        };
        cpsAfter = user.ClickerLevel switch
        {
            0 => 5,
            1 => 7
        };
        cpsPrice = user.ClickerLevel == 2 ? 1499 : 2499;

        energyRechargeBefore = user.EnergyRecoveryLevel switch
        {
            0 => 1,
            1 => 3
        };
        energyRechargeAfter = user.EnergyRecoveryLevel switch
        {
            0 => 3,
            1 => 5
        };
        energyRechargePrice = user.EnergyRecoveryLevel == 2 ? 1499 : 2499;

        energyCapacityBefore = user.EnergyCapacityLevel switch
        {
            0 => 3000,
            1 => 10000
        };
        energyCapacityAfter = user.EnergyCapacityLevel switch
        {
            0 => 10000,
            1 => 17000
        };
        energyCapacityPrice = user.EnergyCapacityLevel == 2 ? 1499 : 2499;

        StateHasChanged();
    }
}
